{"meta":{"title":"shin","subtitle":null,"description":null,"author":"Shinae","url":"https://shin-ae.github.io"},"pages":[],"posts":[{"title":"ES6에서 새로 도입한 데이터 구조 map, set","slug":"es6-05","date":"2017-11-17T16:12:15.000Z","updated":"2017-11-19T09:15:04.433Z","comments":true,"path":"2017/11/18/es6-05/","link":"","permalink":"https://shin-ae.github.io/2017/11/18/es6-05/","excerpt":"","text":"맵은 키와 값을 연결한다는 점에서 객체와 비슷하고, 셋은 중복을 허용하지 않는다는 점을 제외하면 배열과 비슷 MAPES6이전에는 키와 값을 연결하려면 객체를 사용해야 했음. 하지만 객체를 이런 목적으로 사용하면 여러가지 단점이 생김 프로토타입 체인 때문에 의도하지 않은 연결이 생길 수 있음 객체 안 연결된 키와 값이 몇 개나 되는지 쉽게 알아낼 방법이 없음 키는 반드시 문자열이나 심볼이어야 하므로 객체를 키로 써서 값과 연결할 수 없음 객체는 프로퍼티 순서를 전혀 보장하지 않음 map은 키와 값을 연결할 목적이라면 객체보다 나은 선택 123456789101112const n1 = &#123;name:'shin'&#125;;const n2 = &#123;name:'jane'&#125;;const n3 = &#123;name:'jin'&#125;;const n4 = &#123;name:'tt'&#125;;``` ***### map먼저 맵을 만듭니다. ```jsconst userRoles = new Map(); set()다음에는 맵의 set() 메서드를 써서 사용자의 역할을 할당 1234567891011121314151617userRoles.set(u1, 'user');userRoles.set(u2, 'user');userRoles.set(u3, 'admin');//tt는 역할 없음//set() 메서드는 체인으로 연결할 수 있어서 타이핑의 수고를 덜어줌userRoles .set(u1, 'user') .set(u2, 'user') .set(u3, 'admin');//생성자에 배열의 배열을 넘기는 형태로 써도 됨const userRoles = new Map([ [u1, 'user'], [u2, 'user'], [u3, 'admin'],]); get()이제 u2의 역할을 알아볼 때는 get()메서드를 쓰면 됨.1userRoles.get(u2); //\"user\" 맵에 존재하지 않는 키에 get을 호출하면 undefined를 반환. has()맵에 키가 존재하는지 확인하는 has()메서드 1234userRoles.has(u1); //trueuserRoles.get(u1); //\"user\"userRoles.has(u4); //falseuserRoles.get(u4); //undefined 맵에 이미 존재하는 키에 set()을 호출하면 값이 교체됨123userRoles.get(u1); //useruserRoles.set(u1, 'admin');userRoles.get(u1); //admin size()size프로퍼티는 맵의 요소 갯수를 반환1userRoles.size; //3 keys(),values(), entries()key메서드는 맵의 키,values 메서드는 값,entries 메서드는 첫번째 요소가 키값이고 두번째 요소가 값인 배열을 반환이 메서드가 반환하는 것은 모두 이터러블 객체여서 for...of루프를 쓸 수 있음1234567891011121314151617for(let u of userRoles.keys()) console.log(u.name);for(let r of userRoles.values()) console.log(r);for(let ur of userRoles.entries()) console.log(`$&#123;ur[0].name&#125;: $&#123;ur[1]&#125;`);//맵도 분해할 수 있음for(let [u, r] of userRoles.entries()) console.log(`$&#123;u.name&#125;: $&#123;r&#125;`);//entries()메서드는 맵의 기본 이터레이터.//위 코드는 다음과 같이 단축해서 쓸 수 있음for(let [u, r] of userRoles) console.log(`$&#123;u.name&#125;: $&#123;r&#125;`); 이터러블 객체보다 배열이 필요하다면 확산 연산자를 쓰면 됨1[...userRoles.values()]; //[\"user\", \"user\", \"admin\"] delete()맵의 요소를 지울 떄 사용12userRoles.delete(u2);userRoles.size; //2 clear()맵의 요소를 모두 지울 때 사용12userRoles.clear();userRoles.size; //0 위크맵WeakMap은 다음 차이점을 제외하면 Map과 완전히 같음 키는 반드시 객체여야 한다. WeakMap의 키는 가비지 콜렉션에 포함될 수 있다. WeakMap은 이터러블이 아니며 clear()메서드도 없음 일반적으로 자바스크립트 코드는 코드 어딘가에서 객체를 참고하는 한 객체의 메모리를 계속 유지하려고 하는데 WeakMap은 그렇지 않음. 가비지 콜렉션 중인 객체를 노출할 위험이 큼 WeakMap의 이런 특징은 객체 인스턴스의 전용 키를 저장하기에 알맞음1234567891011const secretHolder = (function() &#123; const secret = new WeakMap(); return class&#123; setSecret(secret)&#123; secret.set(this, secret); &#125; getSecret()&#123; return secret.get(this); &#125; &#125;&#125;)(); 비밀을 저장할 때는 setSecret, 보려고 할 때에는 getSecret12345678const a = new secretHolder();const b = new secretHolder();a.setSecret('secret A');b.setSecret('secret B');a.getSecret(); //\"secret A\"b.getSecret(); //\"secret B\" 일반적인 Map을 써도 되지만 그렇게 하면 secretHolder 인스턴스에 저장한 내용은 가비지 콜렉션에 포함되지 않음. 가지비 콜렉션에 추가하고 싶으면 WeakMap(?) SetSet은 중복을 허용하지 않는 데이터 집합.같은 사용자에게 같은 역할을 여러번 부여한다는 것은 상식적이지 않음. 셋은 이런 경웨 이상적인 데이터 구조 12345678910const roles = new Set();//사용자 역할을 추가할 때에는 add()메서드를 사용roles.ass(\"user\"); //Set [\"user\"]//사용자에게 관리자 역할을 추가하려면 add()roles.add(\"admin\"); //Set [\"user\", \"admin\"]//map과 마찬가지로 Set에도 size프로퍼티가 있음roles.size; //2 추가하려는 것이 이미 셋에 있는지 확인할 필요 없음. 이미 있다면 아무 일도 일어나지 않음12roles.add(\"user\"); //Set [\"user\", \"admin\"]roles.size; //2 역할을 제거하고 싶을 떄에는 delete()제거에 성공했다면(그런 역할이 셋에 존재했다면) true반환, 아니면 false123roles.delete(\"admin\"); //trueroles; //Set [\"user\"]roles.delete(\"admin\"); //false WeakSet위크셋은 객체만 포함 할 수 있으며, 이 객체들은 가비지 콜렉터의 대상이 됨.WeakMap과 마찮가지로 WeakSet도 이터러블이 아님 위크셋의 용도는 매우 적음.실제 용도는 주어진 객체가 셋 안에 존재하는지 아닌지를 알아보는 것 뿐 이라고 해도 과언이 아님 EX) 산타클로스가 jingjing라는 WeakSet을 가지고 어떤 아이가 우는 아이인지 확인해서 선물대신 석탄(도 가격이 올랐다던데)을 놓고 온다. 1234567891011121314const jingjing = new WeakSet();const children = &#123; &#123;name: \"suzy\"&#125;, &#123;name: \"shin\"&#125;,&#125;;jingjing.add(children[1]);for(let child of children)&#123; if(jingjing.has(child)) console.log(`Coal for $&#123;child.name&#125;!`); else console.log(`Presents for $&#123;child.name&#125;!`);&#125;","categories":[{"name":"JS","slug":"JS","permalink":"https://shin-ae.github.io/categories/JS/"}],"tags":[{"name":"es6, map, set","slug":"es6-map-set","permalink":"https://shin-ae.github.io/tags/es6-map-set/"}]},{"title":"es6에서의 객체","slug":"es6-04","date":"2017-11-04T14:50:03.000Z","updated":"2017-11-04T15:59:58.918Z","comments":true,"path":"2017/11/04/es6-04/","link":"","permalink":"https://shin-ae.github.io/2017/11/04/es6-04/","excerpt":"","text":"ES6 이전 자바스크립트에서 클래스를 만드는 건 직관적이지 않고 번거로웠음.ES6에서는 클래스를 만드는 간편한 새 문법을 도입 123456class Car&#123; //새 클래스 Car를 만듦 //아직 인스턴스는 만들어지지 않았지만 언제든 만들 수 있음 constructor()&#123; &#125;&#125; 인스턴스를 만들 때는 new키워드 사용12const car1 = new Car();const car2 = new Car(); 이제 Car클래스의 인스턴스가 두개 생김.제조사(make), 모델 데이터, 변속(shift)기능을 추가해보자12345678910111213class car&#123; constructor(make, model)&#123; this.make = make; this.model = model; this.userGears = ['p','n','r','d']; this.userGear = this.userGears[0]; &#125; shift(gear)&#123; if(this.userGears.indexOf(gear)&lt;0) throw new Error(`Invalid gear:$&#123;gear&#125;`); this.userGear = gear; &#125;&#125; 이 클래스를 실제로 사용하면 다음과 같이 사용할 수 있다.123456789const car1 = new car(\"kia\", \"chacha\");const car2 = new car(\"honda\", \"molla\");car1.shift('d');car2.shift('r');car1.userGear //\"d\"car2.userGear //\"r\"car1.make; //\"kia\"car1.model; //\"chacha\"","categories":[{"name":"JS","slug":"JS","permalink":"https://shin-ae.github.io/categories/JS/"}],"tags":[{"name":"es6, 클래스, 인스턴스","slug":"es6-클래스-인스턴스","permalink":"https://shin-ae.github.io/tags/es6-클래스-인스턴스/"}]},{"title":"객체와 객체지향 프로그래밍","slug":"js-obj","date":"2017-11-03T13:26:35.000Z","updated":"2017-11-04T16:00:02.262Z","comments":true,"path":"2017/11/03/js-obj/","link":"","permalink":"https://shin-ae.github.io/2017/11/03/js-obj/","excerpt":"","text":"배열과 자바스크립트 객체의 다른점 배열은 값을 가지며 각 값에는 숫자형 인덱스가 있음. 객체는 프로퍼티를 가지며, 프로퍼티는 키와 값을로 구성. 배열은 순서가 있지만 객체에는 없음 객체의 가장 큰 특징은 키를 통해 프로퍼티에 접근 할 수 있다는 점 프로퍼티의 나열객체 프로퍼티에는 순서가 없음 for…in객체 프로퍼티 나열할 때…12345678910const obj = Symbol();const o = &#123;a:1, b:2, c:3, [obj]:4&#125;;for(let prop in o)&#123; if(!o.hasOwnProperty(prop)) continue; console.log(`$&#123;prop&#125;: $&#123;o[prop]&#125;`);&#125;//a: 1//b: 2//c: 3 for...in 루프에는 키가 심볼인 프로퍼티는 포함되지 않음(obj는 Symbol()로 되어 있음) Object.keysObject.keys는 객체에서 나열 가능한 문자열 프로퍼티를 배열로 반환 1234567const SYM = Symbol();const o = &#123;a:1, b:2, c:3, [SYM]:4&#125;;Object.keys(o).forEach(prop=&gt;console.log(`$&#123;prop&#125;: $&#123;o[prop]&#125;`));//a: 1//b: 2//c: 3 객체의 프로퍼티 키를 배열로 가져와야 할 때는 Object.keys가 편함예를 들어 객체에서 x로 시작하는 프로퍼티를 모두 가져온다면 다음과 같이 할 수 있음 12345const o = &#123;apple:1, xochitl:2, balloon:3, guitar:4, xylophone:5&#125;;Object.keys(o).filter(prop=&gt;prop.match(/^x/)).forEach(prop=&gt;console.log(`$&#123;prop&#125;: $&#123;o[prop]&#125;`));//xochitl: 2//xylophone: 5 프로토타입클래스의 인스턴스에서 사용할 수 있는 메서드 = 프로토타입예를들어 car의 인스턴스에서 사용할 수 있는 shift메서드는 프로토타입 메서드. 프로토타입 메서드는 Car.prototype.shit처럼 표기할 때가 많음.최근에는 프로토타입 메서드를 #으로 표시하는 표기법이 쓰임.Car.protoptype.shift를 Car#shift로 씀. 또한 객체 생성자, 즉 클래스는 Car처럼 항상 첫 글자를 대문자로 표기.","categories":[{"name":"JS","slug":"JS","permalink":"https://shin-ae.github.io/categories/JS/"}],"tags":[{"name":"javascript, object","slug":"javascript-object","permalink":"https://shin-ae.github.io/tags/javascript-object/"}]},{"title":"자바스크립트 array","slug":"js-array","date":"2017-10-21T05:14:29.000Z","updated":"2017-10-21T13:51:32.711Z","comments":true,"path":"2017/10/21/js-array/","link":"","permalink":"https://shin-ae.github.io/2017/10/21/js-array/","excerpt":"","text":"배열의 기초 배열은 객체와 달리 순서가 있는 집합, 0으로 시작하는 숫자형 인덱스 사용 한 배열의 요소가 모두 같은 타입일 필요는 없음 배열 리터럴은 대괄호로 만들고 배열요소에 인덱스로 접근할 때도 대괄호를 사용 배열에 요소가 몇개 있는지 나타내는 length프로퍼티가 있음 배열 길이보다 큰 인덱스를 사용하여 요소를 할당하면 배열은 자동적으로 인덱스에 맞게 늘어남. 빈자리는 undefined로 채워짐 array생성자로 배열을 만들 수 있지만 그렇게 해야하는 경우는 별로 없음 배열 처음이나 끝에서 요소 하나를 추가하거나 빼기push, pop, unshift, shift123456const arr = [\"b\", \"c\", \"d\"];undefinedarr.push(\"e\"); // (4) [\"b\", \"c\", \"d\", \"e\"]arr.pop(); //\"e\", (3) [\"b\", \"c\", \"d\"]arr. unshift(\"a\"); //(4) [\"a\", \"b\", \"c\", \"d\"]arr.shift(); //\"a\", (3) [\"b\", \"c\", \"d\"] 배열 끝에 여러 요소 추가하기concatconcat메서드는 배열 끝에 료소를 추가한 사본을 반환123const arr = [1, 2, 3];arr.concat(4, 5, 6); //(6) [1, 2, 3, 4, 5, 6]//arr는 바뀌지 않음 배열 일부 가져오기sliceslice는 두개의 매개변수를 받는다. 첫번째 매개변수는 어디서부터 가져올지, 두번째는 어디까지 가져올지. 매개 변수로 음수 인덱스를 쓸 수 있고 음수 인덱스를 쓰면 배열의 끝에서 부터 요소를 센다.arr는 바뀌지 않는다123456const arr=[1,2,3,4,5]; arr.slice(3); //[4, 5]arr.slice(2,4); //[3, 4]arr.slice(-2); //[4, 5]arr.slice(1, -2); //[2, 3]arr.slice(-2,-1); //[4] 임의의 위치에 요소 추가하거나 제거하기splice첫번쨰 매개변수는 수정을 시작할 인덱스, 두번쩨 인덱스는 제어할 요소 갯수. 나머지 매개변수는 배열에 추가될 요소.12345const arr = [1,5,7];arr.splice(1,0,2,3,4); //[], (6) [1, 2, 3, 4, 5, 7]arr.splice(5,0,6); //[], (7) [1, 2, 3, 4, 5, 6, 7]arr.splice(1,2); //[2,3], (5) [1, 4, 5, 6, 7]arr.splice(2,1,'a','b'); //[5], (6) [1, 4, \"a\", \"b\", 6, 7] 배열 안에서 요소 교체하기copyWithin배열 요소를 복사해서 다른 위치에 붙여두고, 기존의 요소를 덮어씀첫번째 매개변수는 복사한 요소를 붙여넣을 위치, 두번째 매개변수는 복사를 시작할 위치, 세번째는 복사를 끝낼 위치. 음수 인덱스를 사용하면 배열의 끝에서부터 셈12345const arr = [1,2,3,4];undefinedarr.copyWithin(1,2); //(4) [1, 3, 4, 4]arr.copyWithin(2,0,2); //(4) [1, 3, 1, 3]arr.copyWithin(0,-3,-1); //(4) [3, 1, 1, 3] 특정 값으로 배열 채우기fill1234567const arr = new Array(5).fill(1); //(5) [1, 1, 1, 1, 1]arr.fill(\"a\"); //(5) [\"a\", \"a\", \"a\", \"a\", \"a\"]arr.fill(\"b\", 1); //(5) [\"a\", \"b\", \"b\", \"b\", \"b\"]arr.fill(\"c\", 2,4); //(5) [\"a\", \"b\", \"c\", \"c\", \"b\"]arr.fill(5,5,-4); //(5) [\"a\", \"b\", \"c\", \"c\", \"b\"]arr.fill(5.5,-4); //(5) [\"a\", 5.5, 5.5, 5.5, 5.5]arr.fill(0,-3,-1); //(5) [\"a\", 5.5, 0, 0, 5.5] 배열 정렬과 역순 정렬reverce, sort123const arr = [1,2,3,4,5];arr.reverse(); //(5) [5, 4, 3, 2, 1]arr.sort(); //(5) [1, 2, 3, 4, 5] sort는 정렬 함수를 받을 수 있음. 일반적으로는 객체가 들어있는 배열을 정렬할 수 없지만 정렬함수를 사용하면 가능. 12345678const arr = [&#123;name:\"shin\"&#125;,&#123;name:\"hollo\"&#125;,&#123;name:\"ha\"&#125;,&#123;name:\"ahmad\"&#125;];arr.sort(); //arr에 변화 없음arr.sort((a,b)=&gt; a.name &gt; b.name);//&#123;name: \"ahmad\"&#125;,&#123;name: \"ha\"&#125;,&#123;name: \"hollo\"&#125;,&#123;name: \"shin\"&#125;//name프로퍼티의 알파벳 순으로 정렬arr.sort((a,b) =&gt; a.name[1] &lt; b.name[1]);// &#123;name: \"hollo\"&#125;,&#123;name: \"ahmad\"&#125;,&#123;name: \"shin\"&#125;,&#123;name: \"ha\"&#125;//name 프로퍼티 두번째 글자의 알파벳 역순으로 정렬 배열검색indexOf, lastIndexOf찾고자 하는 것과 정확히 일치(===)하는 첫번째 요소의 인덱스를 반환.lastIndexOf는 배열의 끝에서 부터 검색.일치하는 것을 찾지 못하면 -1을 반환한다.12345const o = &#123;name:\"Jerry\"&#125;;const arr = [1,5,\"a\",o,true,5,[1,2],\"9\"];arr.indexOf(5); //1arr.lastIndexOf(5); //5arr.indexOf(&#123;name:\"Jerry\"&#125;); //-1 findIndexindexOf와 비슷하지만 보조함수를 써서 검색조건을 지정할 수 있음1234const arr=[&#123;id:5, name:\"shin\"&#125;,&#123;id:7, name:\"hollol\"&#125;];undefinedarr.findIndex(o =&gt; o.id ===5); //0arr.findIndex(o=&gt;o.name===\"hollol\"); //1 find조건에 맞는 요소의 인덱스가 아니라 요소 자체를 원할 때는 find를 사용findIndex와 마찬가지로 검색 조건을 함수로 전달할 수 있음12const arr=[&#123;id:5, name:\"shin\"&#125;,&#123;id:7, name:\"hollol\"&#125;];arr.find(o =&gt; o.id ===5); //&#123;id: 5, name: \"shin\"&#125; some, everysome은 조건에 맞는 요소를 찾으면 즉시 true반환 찾지 못하면 false반환123const arr=[5,7,12,15,17];arr.some(x=&gt; x%2 === 0); //true, 12가 짝수이기 때문arr.every(x=&gt; x%2 === 0); //false map, filtermapmap은 배열 요소를 변형1234567const cart = [&#123;name:\"book\", price:123.5&#125;,&#123;name:\"tea\", price:56.7&#125;];const names = cart.map(x=&gt;x.name); //(2) [\"book\", \"tea\"]const items = [\"candy\",\"choco\"];const price = [2.25, 7.3];const list = items.map((x, i) =&gt; (&#123;name: x, price:price[i]&#125;));//list : [&#123;name: \"candy\", price: 2.25&#125;,&#123;name: \"choco\", price: 7.3&#125;] filter배열에서 필요한 것들만 남김 reducemap이 배열 각 요소를 변형한다면 reduce는 배열 자체를 변형. reduce라는 이름은 이 메서드가 보통 배열을 값 하나로 줄이는데 쓰이기 때문에 붙여짐. 123const arr = [5,7,2,4];const sum = arr.reduce((a,x) =&gt; a += x, 0); //18//0은 초기값, a의 초기값은 0이 된다. 문자열 병합join매개변수가 생략 될 때는 기본값 쉼표(,)문자열 요소를 합칠 때 정의되지 않은 요소, 삭제된 요소, null, undefined는 모두 빈 문자열로 취급123456const arr = [1, null, \"hello\", \"world\", true, undefined];delete arr[3];arr.join(); //\"1,,hello,,true,\"arr.join(\"-\"); //\"1--hello--true-\"const html = '&lt;ul&gt;&lt;li&gt;' + arr.join('&lt;/li&gt;&lt;li&gt;')+'&lt;/li&gt;&lt;ul&gt;';// html : \"&lt;ul&gt;&lt;li&gt;1&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;hello&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;true&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;ul&gt;\"","categories":[{"name":"JS","slug":"JS","permalink":"https://shin-ae.github.io/categories/JS/"}],"tags":[{"name":"javascript, array, 배열","slug":"javascript-array-배열","permalink":"https://shin-ae.github.io/tags/javascript-array-배열/"}]},{"title":"jquery로 퍼센트를 표시해보자!","slug":"jquery-01-circle","date":"2017-10-19T09:32:59.000Z","updated":"2017-10-19T13:21:54.961Z","comments":true,"path":"2017/10/19/jquery-01-circle/","link":"","permalink":"https://shin-ae.github.io/2017/10/19/jquery-01-circle/","excerpt":"","text":"발단스터디에서 스터디 하시는 분이 소개팅 어플을 개발하고 계신데 거기에서 상대 매칭율을 이쁘고 아름답게 구현하심. 나도 해보고 싶었음. 하지만 쉽지 않았음. SVG로 원을 그려보자일단 우리에게는 원이 필요하다. svg로 원을 그려보자! 12345&lt;div id = \"cont\"&gt; &lt;svg viewPort=\"0 0 320 320\" width=\"320\" height=\"320\" id=\"svg\" xmlns=\"http://www.w3.org/2000/svg\"&gt; &lt;circle id=\"path\" cx=\"160\" cy=\"160\" r=\"100\" stroke=\"#000000\" fill=\"none\" stroke-width=\"10\" stroke-linecap=\"round\"&gt;&lt;/circle&gt; &lt;/svg&gt;&lt;/div&gt; See the Pen NaoyoY by shin (@hololloy) on CodePen. 그럼 이렇게 이쁜 원이 그려지는 것을 볼 수 있다.다음단계에서는 어떻게 원에 애니메이션을 주느냐인데 여기에서 알아야 할 CSS속성이 있다. stroke-dasharray, stroke-dashoffsetstroke-dasharraydasharray는 점의 길이와 간격 속성을 부여한다. dasharray에 대한 설명은 여기에서 자세히 볼 수 있다. stroke-dashoffset specifies the distance into the dash pattern to start the dash 즉, 대시를 시작하기 위해 대시 패턴으로의 거리를 지정하는 것. 모르겠다 이건…어디 블로그에서는 점으로 만들어주는 속성이라고 하는데….얼렁뚱땅 다음 단계로 넘어가보자! 본격적인 애니메이션 작업stroke-dasharray와 stroke-dashoffset을 설정하기 위해서는 일단 원의 둘레 길이를 알아야한다. 우리는 위에서 r(반지름)이 100인 원을 그렸는데 이 원의 둘레는 빠밤 2&pi;r = 628.3185307179587 이렇게 나오는데 이 속성값을 클래스 cir에 넣어줘야 한다.(자바스크립트에서 &pi;는 Math.PI로 계산 할 수 있다.) 1234#svg .cir&#123; stroke-dasharray: 628.3185307179587; stroke-dashoffset:0;&#125; 이렇게 하면 아무 변화가 없는데 여기에 애니메이션을 넣는다.12stroke-dashoffset: 628.3185307179587;transition: stroke-dashoffset 1s linear; 그러면 원이 세시 방향에서부터 사라지는 것을 볼 수 있다.이건 svg circle의 특성으로 작업을 용이하게 하기 위해서 시계 반대방향으로 90도 돌려주자.123#svg &#123; transform: rotate(-90deg);&#125; 이렇게 하면 offset수치 변화에 따른 애니메이션을 본 것이다. 포스팅을 하면서 알게된 것은 변화가 있을 때에만 애니메이션을 볼 수 있다는 것(당연한 것을…)자, 이제 우리의 시작점은 12시에 숨어있을 것이다. 데이터를 변수 val에 입력하여 그것이 애니메이션으로 나타나게 작업을 진행해보자. 작업의 순서는 다음과 같다특정 값 지정-&gt;값에 따른 호의 길이 계산-&gt; css에 입력 1234567891011$(document).ready(function()&#123; var val = 50; //특정 값 입력(퍼센트 계산이기 때문에 0~100 사이의 값 입력) var $circle = $('#svg .cir'); var r = $circle.attr('r'); // var per = ((100 - val) / 100) * Math.PI *r * 2; //호의 길이 계산 $circle.css( strokeDashoffset: per ); //css에 offset 수치 입력&#125;); 이렇게 하면 다음과 같은 결과가 나온다. See the Pen QqYmjZ by shin (@hololloy) on CodePen. $(document).ready(function(){});이 함수로 한번 더 감싸주지 않아서 자꾸 오류가 생겼는데 여기에 넣으니 해결. 오늘은 여기까지 그럼 안녕~","categories":[{"name":"JS","slug":"JS","permalink":"https://shin-ae.github.io/categories/JS/"}],"tags":[{"name":"jQuery, svg, circle, animation","slug":"jQuery-svg-circle-animation","permalink":"https://shin-ae.github.io/tags/jQuery-svg-circle-animation/"}]},{"title":"lenovo-ideapad-510s ram upgrade","slug":"etc-02","date":"2017-10-10T10:03:07.000Z","updated":"2017-10-19T10:11:09.668Z","comments":true,"path":"2017/10/10/etc-02/","link":"","permalink":"https://shin-ae.github.io/2017/10/10/etc-02/","excerpt":"","text":"lenovo-ideapad-510s이번년도 들어서 스터디를 위해 산 노트북.가성비 끝판왕 이라는 타이틀이 있는 노트북으로 현재 자바스크립트 스터디를 위해서 사용하고 있는데 나쁘지 않다. 사실 전에 사용하던 노트북이 엄청 무겁고 느려서 이정도도 엄청 좋다고 생각하는 중이다. 완전 좋아. 내가 돌리는 프로그램은 포토샵, 일러스트, VS-code, Visual Studio 2017 정도. 회사에서는 데스크탑을 사용하기 때문에 밖에 나가서 필요하면 사용한다. 무게는 1.45kg정도이지만…..사실 1키로 넘어가면 다들 무겁게 느껴지잖아요? 램교체처음 살때는 나중에 램 교체할 생각으로 4기가 짜리 램을 샀는데….아 이 노트북은 램을 교체하라고 만든 노트북이 아님…. 아직 안사신 분들은 애초에 좀 큰 용량의 램을 처음에 살때 추가옵션으로 선택하십쇼….나 이거 교체하다가 울뻔했네 진짜…. 1.일단 이 노트북은 램을 교체하기 위한 뚜껑? 이 따로 존재하지 않습니다. 뒷면의 나사를 다 풀어야 하는데 풀고 나서 약간의 힘을 줘서 뚜껑을 열면 뭐 하나 부셔지는 소리와 함께 저 모습을 볼 수 있습니다. 2.램 위를 덮고있는 덮개는 몇개의 집게가 지탱하고 있습니다. 이 녀석들을 다 풀어줘야 합니다. 바깥으로 연다고 생각하시고 하나씩 풀어주시면 됩니다. 도구는…저는 마이너스 드라이버를 사용하려고 했지만 틈이 너무 좁아서 들어가지가 않아 칼을 사용했습니다. 일반 문구용 커터칼은 부러질 것 같아 맥가이버 칼에 들어있는 칼을 사용했습니다. 3.덮개를 제거했으면 램을 뽑아봅시다. 사진에 표시된 저 부분은 누르면 램이 푝하고 튀어 오릅니다. 그럼 램을 교체한 다음 다시 눌러서 넣어 줍니다. 4.그리고 덮개를 잡아주던 집게를 다시 오무린 다음 뚜껑을 덮고 마무리 해주시면 됩니다. 램을 교체할때에는 전원이 완전히 나갔는지 확인하시는거 잊지 마시고, 뚜껑 다시 열기 어려우니 뚜껑 닫기 전에 전원 켜서 정상적으로 작동하는지 확인하신 하시는 것이 좋을 것 같습니다. 참고가 되었던 유튜브도 공유해 드립니다. 0","categories":[{"name":"etc","slug":"etc","permalink":"https://shin-ae.github.io/categories/etc/"}],"tags":[{"name":"lenovo-ideapad-510s, ram, 레노버-아이디어패드, 램교체","slug":"lenovo-ideapad-510s-ram-레노버-아이디어패드-램교체","permalink":"https://shin-ae.github.io/tags/lenovo-ideapad-510s-ram-레노버-아이디어패드-램교체/"}]},{"title":"es6에서 추가된 함수 기능","slug":"ex6-04","date":"2017-09-15T16:32:50.000Z","updated":"2017-10-19T10:09:35.407Z","comments":true,"path":"2017/09/16/ex6-04/","link":"","permalink":"https://shin-ae.github.io/2017/09/16/ex6-04/","excerpt":"","text":"es6에서 추가된 함수의 기능을 살펴보기 전에 함수의 기본을 알고 가도록 하겠다! 함수는 기본적으로 이렇게 쓰인다. 1234function hello()&#123; return \"Hello world!\";&#125;hello(); //\"Hello world!\" 자바스크립트는 함수를 호출하지 않고 다른 값과 마찬가지로 참조하기만 할 수 있다는 특징을 가지고 있는 유연한 언어. 그렇기 때문에 함수를 변수에 할당하여 다른 이름으로 함수를 호출할 수도 있다. 12const f = hello;f(); //\"Hello world!\" 또한 함수를 객체 프로퍼티나 배열요소에도 할당 할 수 있다. 함수를 호출하면서 정보를 전달 할 떄, 즉 함수에 정보를 전달하려면 매개변수를 이용한다. 매개변수는 함수가 호출되기 전에는 존재하지 않는다는 점을 제외하면 일반적인 변수와 마찮가지. 1234function avg(a, b)&#123; return (a+b)/2;&#125;avg(5, 10); //7.5 자바스크립트에서는 다른 함수들 과는 다르게 매개변수 갯수와 상관없이 몇개의 매개변수를 전달해도 됨. 정해진 매개 변수에 값을 제공하지 않으면 암시적으로 undefined가 할당된다 1234function f(x)&#123; return `f: x=$&#123;x&#125;`;&#125;f(); //\"f: x=undefined\" ES6에 추가된 매개변수 기본값 지정하기일반적으로 매개변수 값을 지정하지 않으면 위에처럼 undefined가 값으로 할당된다. ES6에서는 기본값을 지정 할 수 있게 되었다. 1234567function f(a,b = \"blabla\",c=3)&#123; return `$&#123;a&#125; - $&#123;b&#125; - $&#123;c&#125;`;&#125;f(5, 6, 7); //\"5 - 6 - 7\"f(5, 6); //\"5 - 6 - 3\"f(5); //\"5 - blabla - 3\"f(); //\"undefined - blabla - 3\" 화살표 함수ES6에서 새로만든 화살표 표기법은 function이라는 단어와 중괄호 숫자를 줄이려고 고안된 단축 문법입니다. 화살표 문법은 다음과 같은 특징을 가진다. function을 생략해도 됨 함수에 매개변수가 단 하나 뿐이라면 괄호(())도 생략할 수 있음 함수 바디가 표현식 하나라면 중괄호와 return문도 생략할 수 있다. 1234567891011const f1 = fuction() &#123;return \"hello\";&#125;//또는const f1 = () =&gt; \"hello\";const f2 = function(name) &#123;return `Hello, $&#123;name&#125;!`;&#125;//또는const f2 = name =&gt; `Hello, $&#123;name&#125;!`;const f3 = function(a, b) &#123;return a+b&#125;;//또는 const f3 = (a, b) =&gt; a+b; 화살표 함수는 항상 익명함수이다. 만약 이름 붙인 함수가 필요하다면 평소에 하던 방식으로 함수를 만들면 된다. 화살표 함수는 위의 특징 말고도 this가 다른 변수와 마찬가지로 정적으로 묶인다. 객체사용자로 사용할 수 없다. arguments변수도 사용할 수 없다. 확산 연산자가 ES6에서 생겼으니 필요없다고 하기도 한다. 처음에 만들었던 함수를 화살표 함수로 바꾸어 보장123456789function avg(a, b)&#123; return (a+b)/2;&#125;avg(5, 10); //7.5const avg = (a, b) =&gt; &#123; return (a+b)/2 &#125;;avg(5, 10); //7.5","categories":[{"name":"JS","slug":"JS","permalink":"https://shin-ae.github.io/categories/JS/"}],"tags":[{"name":"es6, function, 매개변수","slug":"es6-function-매개변수","permalink":"https://shin-ae.github.io/tags/es6-function-매개변수/"}]},{"title":"해체할당","slug":"es6-03","date":"2017-09-05T15:23:01.000Z","updated":"2017-10-19T09:45:48.847Z","comments":true,"path":"2017/09/06/es6-03/","link":"","permalink":"https://shin-ae.github.io/2017/09/06/es6-03/","excerpt":"","text":"해체 할당이 기능은 객체나 배열을 변수로 ‘해체’할 수 있다.일단 다짜고짜 객체 해체부터 시작 123456789//객체선언const obj = &#123;b:2, c:3, d:4&#125;;//해체할당const &#123;a, b, c&#125; = obj;a; //undefined : obj에는 a프로퍼티가 없음b; //2c; //3d; //ReferenceError : d는 정의되지 않음 객체를 해체 때에는 반드시 변수 이름과 프로퍼티 이름이 일치해야 한다이 예제에서는 선언과 할당을 같은 문에서 실행. 객체해체는 할당만으로도 이루어질 수 있지만 그렇게 하려면 반드시 괄호를 써야함. 괄호를 쓰지 않으면자바스클립트는 표현식 좌변을 블록으로 해석함(???) 12345const obj = &#123;b:2, c:3, d:4&#125;;let a, b, c;&#123;a, b, c&#125; = obj; //에러염(&#123;a, b, c&#125; = obj); //동작함...?? 배열을 해체 할 때엔 배열 요소에 대응할 변수를 마음대로 쓸 수 있음. 이들은 배열 순서대로 대응한다. 123456const arr = [1,2,3];let[x,y] = arr;x; //1y; //2z; //ReferenceError x, y요소에 값이 할당되고 그 뒤의 배열요소는 모두 버려지는데 확산 연산자를 사용하면 남은 요소를 새 배열에 할당할 수 있다. 123456const arr = [1, 2, 3, 4, 5];let [x,y, ...rest] = arr;x; //1y; //2rest; //[3,4,5] 배열 해체를 활용하면 변수의 값을 서로 바꿀 수도 있음. 해체를 사용하지 않으면 임시변수가 필수적인 작업이라고 함 1234let a = 5, b = 10;[a, b] = [b, a];a; //10b; //5","categories":[{"name":"JS","slug":"JS","permalink":"https://shin-ae.github.io/categories/JS/"}],"tags":[{"name":"es6, 해체할당, destructuring-assignment","slug":"es6-해체할당-destructuring-assignment","permalink":"https://shin-ae.github.io/tags/es6-해체할당-destructuring-assignment/"}]},{"title":"자바스크립트 숫자 비교할때 주의할 부분","slug":"JS-Compare-Numbers","date":"2017-09-03T15:06:56.000Z","updated":"2017-10-19T09:46:24.631Z","comments":true,"path":"2017/09/04/JS-Compare-Numbers/","link":"","permalink":"https://shin-ae.github.io/2017/09/04/JS-Compare-Numbers/","excerpt":"","text":"NaN은 무엇과도 같지 않음NaN값은 그 자신을 포함하여 무엇과도 같지 않다. 12NaN === NaN //falseNaN == NaN //false 그럼 어떻게 숫자가 NaN인지 알아보느냐!inNaN(x)함수를 사용하면 된다. isNaN 함수는 x가 NaN일때 true를 반환한다. 12let NotNaN = \"string\";isNaN(NotNan); //true 소수 비교하기자바스크립트의 숫자는 모두 더블형식더블형식은 실수를 말하는데 실수는 0.3000000000000000000000004처럼 작은 값을 포함하기도 한다. 그렇기 때문에 실수를 비교할 때에는 Number.EPSILON의 숫자형 상수를 이용하여 비교한다고 한다. MDN에서는 Number.EPSILON 속성(property)은 Number 형으로 표현될 수 있는 1과 1보다 큰 값 중에서 가장 작은 값의, 차입니다. 라고 설명하고 있다. 두개의 더블(실수)형식이 같다고 할 수 있을 만큼 가까운 숫자인지 판단할때 일반적으로 사용하는 방법이라고 하니 걍 익혀두는게 좋을 듯 아래 예시로 좀 더 자시헤 보도록 할까…123456let n = 0;while(true)&#123; n += 0.1; if(n === 0.3) break;&#125;console.log(`Stopped at $&#123;n&#125;`); 이렇게 하면 0.3에 멈출거라고 생각하지만 컴퓨터는 값을 내놓지 못하고 끝없이 돌아갔다. 창 멈춤…ㄷㄷㄷ 그래서 Number.EPSILON과 관계연산식을 써서 느슨하게 비교해야함. 123456let n = 0;while(true)&#123; n += 0.1; if(Math.abs(n-0.3) &lt; Number.EPSILON) break;&#125;console.log(`Stopped at $&#123;n&#125;`); //Stopped at0.30000000000000004","categories":[{"name":"JS","slug":"JS","permalink":"https://shin-ae.github.io/categories/JS/"}],"tags":[{"name":"javascript, compare, numbers","slug":"javascript-compare-numbers","permalink":"https://shin-ae.github.io/tags/javascript-compare-numbers/"}]},{"title":"js pattern 01","slug":"js-pattern-01","date":"2017-09-01T13:42:02.000Z","updated":"2017-10-19T09:46:37.989Z","comments":true,"path":"2017/09/01/js-pattern-01/","link":"","permalink":"https://shin-ae.github.io/2017/09/01/js-pattern-01/","excerpt":"","text":"제어문에서의 유용한 자바스크립트 패턴continue 이용하여 조건 중첩 줄이기 반복문 안에 조건문을 쓸 경우, 즉 특정 조건에서만 반복문을 써야 하는데 그때 continue 문을 써서 구조를 간결하게 할 수 있음 12345678 while(funds &gt; 1 &amp;&amp; funds &lt; 100)&#123; let total = rand(1, funds); if(total === 13) &#123; console.log(\"Unlucky! Skip this round....\"); continue; &#125; //플레이 구문&#125; break, return 문으로 불필요한 연산 줄이기뭔가를 찾기 위해서 루프를 실행했다면, 찾고 난 후에는 계속 실행할 필요가 없음 1234567891011et arr = [1,2,3,4,5,6,7,8,9,10];for(let n of arr)&#123; if(n === 5)&#123; break; &#125; console.log(n);&#125;//1//2//3//4 루프를 완료한 뒤 인덱스 값 사용하기break문을 써서 루프를 일찍 종료했는데 인덱스 변수의 값이 필요할 때 12345678910let i = 0;const arr = [1,2,3,4,5,6,7,8,9];for(; i&lt;arr.length; i++)&#123; if(arr[i] === 5) break;&#125;if(i === arr.length) console.log('뭔지 모르겠다');else console.log(`루프를 돌아서 마지막에 멈춘 수의 포지션은 $&#123;i&#125;입니다. `);//루프를 돌아서 마지막에 멈춘 수의 포지션은 4입니다. 이건 break문을 써서 루프를 끝내도록 해야만 사용할 수 있다고 한다. 배열을 수정할 때 감소하는 인덱스 사용하기123for (let i = arr.length-1; i&gt;=0; i--)&#123; if(isPrime(arr[i])) arr.splice(i, 1);&#125; 그 이외에 for루프를 좀 더 효율적으로 쓰기위한 패턴이건 예전에 잠깐 패턴 공부할 때 나온적이 있는데 다시 살펴보도록 하겠음 1234var myArr = [1,2,3,4,5]for (var i=0; i&lt; myArr.length; i++)&#123; console.log(myArr[i]);&#125; 보통의 for루프 이 패턴의 문제점은 루프 순회시 마다 배열의 length 에 접근한다는 점이다.myArr이 배열이 아니라 HTMLCollection 이라면 이 때문에 코드가 느려질 수 있다.HTMLCollection 의 length 속성에 접근할 때마다 실제 DOM 에 질의를 요청하는 것과 같으며 일반적으로 DOM접근은 비용이 크다.따라서 이러한 비용을 줄이기 위해 배열의 length를 캐시하면 된다. 123for (var i=0, max = myArr.length; i&lt;max; i++)&#123; console.log(myArr[i]);&#125; 또한 i– 를 이용한 패턴이 있음1234 for(; var i = myArr.length; i--;)&#123; console.log(myArr[i]);&#125;","categories":[{"name":"JS","slug":"JS","permalink":"https://shin-ae.github.io/categories/JS/"}],"tags":[{"name":"js, pattern","slug":"js-pattern","permalink":"https://shin-ae.github.io/tags/js-pattern/"}]},{"title":"es6-02","slug":"es6-02","date":"2017-09-01T11:36:42.000Z","updated":"2017-10-19T09:45:16.507Z","comments":true,"path":"2017/09/01/es6-02/","link":"","permalink":"https://shin-ae.github.io/2017/09/01/es6-02/","excerpt":"","text":"for…in 루프for...in루프는 객체의 프로퍼티에 루프를 실행하도록 설계된 루프 12for(variable in object) statement 이건 es6에 새로 추가된 문법은 아니지만 내가 몰랐었으니 추가 12345const player = &#123; name : 'Thomas', rank : 'Midshipman', age:25&#125;for(let prop in player)&#123; if(!player.hasOwnProperty(prop)) continue; console.log(prop + ':' + player[prop]); &#125; 결과는 123\"name:Thomas\"\"rank:Midshipman\"\"age:25\" 여기에서 player.hasOwnProperty를 호출할 필요는 없지만 이 메서드를 생략하면 에러가 생기기 쉽다고 한다. 나중에 다시 보는걸로… for…of 루프for…of 루프는 ES6에 새로생긴 반복문.컬렉션 요소에 루프를 실행한다고 한다. 배열은 물론 이터러블(iterable)객체에 모두 사용이 가능하다. 12for(variable of object) statement 1234const hand = [randFace(), randFace(), randFace()];for(let face of hand) console.log(`you rolled...$&#123;face&#125;!`);// for…of는 배열에 루프를 실행해야 하지만 각 요소의 인덱스를 알 필요는 없을때 알맞음. 인덱스를 알아야 하면 일반적인 for루프를 이용하는 것으로 123const hand = [randFace(), randFace(), randFace()];for (let i=0; i&lt;hand.length; i++) console.log(`ROLL $&#123;i+1&#125; : $&#123;hand[i]&#125;`); 책에서는 이렇게 나왔는데 이론적으로 나와서 잘 이해가 되지 않는다.예제를 찾아보자. 12345678let iterable = [10, 20, 30];for (let value of iterable) &#123; console.log(value);&#125;// 10// 20// 30 12345678let iterable = \"boo\";for (let value of iterable) &#123; console.log(value);&#125;// \"b\"// \"o\"// \"o\" 123456789101112131415let iterable = new Map([[\"a\", 1], [\"b\", 2], [\"c\", 3]]);for (let entry of iterable) &#123; console.log(entry);&#125;// [a, 1]// [b, 2]// [c, 3]for (let [key, value] of iterable) &#123; console.log(value);&#125;// 1// 2// 3 등등 다양하게 쓸 수 있다고 한다. 더 많은 예제는 아래 링크에서 볼 수 있다.MDN","categories":[{"name":"JS","slug":"JS","permalink":"https://shin-ae.github.io/categories/JS/"}],"tags":[{"name":"es6, for-in, for-of","slug":"es6-for-in-for-of","permalink":"https://shin-ae.github.io/tags/es6-for-in-for-of/"}]},{"title":"es6-01","slug":"es6-01","date":"2017-08-20T15:48:56.000Z","updated":"2017-10-19T09:45:02.053Z","comments":true,"path":"2017/08/21/es6-01/","link":"","permalink":"https://shin-ae.github.io/2017/08/21/es6-01/","excerpt":"","text":"변수 선언변수(variable)는 간단히 말해 이름이 붙은 값.기존에는 var만 있었는데 ES6에서는 let 과 const 가 새로 생겼다. 상수(constant)는 변수와 마찮가지로 값을 할당 받을 수는 있지만 한번 할당한 값은 바꿀 수 없는 모양 될 수 있으면 변수보다는 상수를 쓰는게 좋다고 한다. 상수를 사용하면 값을 바꾸지 말아야 할 데이터에서 실수로 값을 바꾸는 일이 줄어든다고 한다.하지만 루프나 시간이 지나면서 값이 바뀌는 가변적인 데이터에는 변수를 써야하는 케이스 바이 케이스. 문자열 병합ES6이전에는 변수나 상수를 문자열 안에 쓰는 방법은 문자열 병합 뿐이었음(+). ES6에서는 문자열 템플릿(template)이라는 기능을 도입. Interpolation이라고 부르기도 함 12let currentTemp = 19.5;const message = \"The current temperature is\" + currentTemp + \"\\u00b0c\"; 기존의 위와 같은 코드를 문자열 병합을 사용하면 12let currentTemp = 19.5;const message = `The current temperature is $&#123;currentTemp&#125; \\u00b0c`; 이렇게 쓸 수 있는데 여기에서 문자열을 감싸고 있는 것은 `백틱(backtick)이라는 것을 명심!중괄호 안에는 어떤 표현식이라도 쓸 수 있다. 여러줄의 문자열에는 이렇게도 쓸 수 있징 1234let currentTemp = 19.5;const multiline = 'Current temperature : \\n' + `\\t$&#123;currentTemp&#125;\\u00b0c\\n` + \"Dont't worry...the heat is on!\"; 문자열 병합을 사용할 때에는 백틱, 따옴표를 섞어서 써도 무방(근데 왜 DOM에는 글씨가 한줄로 나오나…. 콘솔이나 alert에서는 잘 나왔딩ㅜ) symbol심볼은 유일한 토큰을 나타내기 위해 ES6에서 도입한 새로운 데이터 타입.심볼은 항상 유일. 객체와 유사하다. 심볼은 Symbol() 생성자로 만든다. 123const RED = Symbol(\"The color of a sunset!\");const ORANGE = Symbol(\"The color fo a sunset!\");RED === ORANGE //false : 심볼은 모두 서로 다름 우연히 다른 식별자와 혼동해서는 안 되는 고유한 식별자가 필요하다면 심볼을 사용하도록!","categories":[{"name":"JS","slug":"JS","permalink":"https://shin-ae.github.io/categories/JS/"}],"tags":[{"name":"es6, let, const, var","slug":"es6-let-const-var","permalink":"https://shin-ae.github.io/tags/es6-let-const-var/"}]},{"title":"es6_start","slug":"es6-start","date":"2017-08-19T02:39:11.000Z","updated":"2017-10-19T09:46:04.641Z","comments":true,"path":"2017/08/19/es6-start/","link":"","permalink":"https://shin-ae.github.io/2017/08/19/es6-start/","excerpt":"","text":"난관봉착자바스크립트를 쓸 일이 없어서 알고리즘을 공부하고 있다.이번 문제는 무작위 5개의 정수에서 4개를 뽑아 더하는데 그 합이 큰것돠 작은 것을 차례대로 도출하는 알고리즘이었다. 만약 배열이1var arr = [1,2,3,4,5]; 가 되면 최소합 = 1+2+3+4 = 10, 최대합 = 2+3+4+5 = 14 이기 때문에 10 14를 도출하면 됨 그럼 배열에 있는 수를 다 더한 다음에 제일 작은 수를 빼면 최대합이 되고, 제일 큰수를 빼면 최대합이 되는거 아닌가!!! 빙고!! 뭔가 배열 중에 제일 큰 수를 골라낼 메소드가 있을 것이라 생각하고 검색에 들어가기 시작했다. 똑같은 맘, 똑같은 오류일단 w3school에 Math object를 다시 한번 찾아본다. 옳거니 12Math.min(0, 150, 30, 20, -8, -200); // returns -200Math.max(0, 150, 30, 20, -8, -200); // returns 150 이런 방법이 있었다. 그럼 이렇게 하면 되는 것 아닌가.12arr.min()arr.max() 하지만 실패. 검색을 하니 나와 같은 동지를 발견하게 되었다.사람들이 그의 물음에 답변을 해주었는데 생각보다 답이 어려움….ㅁㅎㄷ 동공지진, 그리고 ES6 안타깝게도 내가 배웠던 자바스크립트 중에는 function을 쓰지 않고는 배열에서 가장 큰수, 작은 수를 도출하는 것은 어려워보였다. 1234567 Array.prototype.max = function() &#123; return Math.max.apply(null, this);&#125;;Array.prototype.min = function() &#123; return Math.min.apply(null, this);&#125;; 흠…..좀 더 쉬운 방법이 없을까 하는 중 눈에 띄는 답변 12var min = Math.min( ...arr ), max = Math.max( ...arr ); 세상에 마상에… 이건 ECMAScript 6를 이용한 방법! 마침 ES6에 대해서 공부할 계획이 있었는데 나쁘지 않은 시작이다.","categories":[{"name":"JS","slug":"JS","permalink":"https://shin-ae.github.io/categories/JS/"}],"tags":[{"name":"es6, Math.min, Math.max, array","slug":"es6-Math-min-Math-max-array","permalink":"https://shin-ae.github.io/tags/es6-Math-min-Math-max-array/"}]},{"title":"wix","slug":"wix","date":"2017-08-11T11:31:01.000Z","updated":"2017-08-11T12:12:08.522Z","comments":true,"path":"2017/08/11/wix/","link":"","permalink":"https://shin-ae.github.io/2017/08/11/wix/","excerpt":"","text":"wixwix가 처음 생겼을 때 너무 센세이션이어서 나도 가입을 하고 둘러보기는 했으나 실제로 만들어 본 적은 없었다. 그러던 중 회사에 급하게 영문 홈페이지가 필요해서 간단하게 wix로 홈페이지를 만들기로 결정. 후다닥 만들어 보자.참고로 이번에 제작하게 된 회사 영문페이지는 구체적인 자료보다는 스토리 위주의 글이 많았다. 평소에 하던 작업과는 많이 달라서 여러가지 오프라인 자료들도 많이 참고를 했다. 내가 받았을 때엔 페이지에 들어가야 하는 요소는 다 들어가 있었다.하지만 걍 줄글만 있는 상황 왼쪽에 있는 추가 메뉴이다. 튜토리얼도 끝내지 않고 투입됐지만 그런건 필요 없을 정도로 알기쉽고 간편하다. 요소를 클릭하면 편집 버튼이 나오는데 여기에서 자유로운 편집이 가능하다.클릭 앤 드랙그로 만들어지는 윅스는 바로 볼 수도 있고 저장 후 한꺼번에 개시할 수도 있다. 저장과 개시 기능이 나누어져 있다. 나는 wix를 써서 하루를 채 쓰지 않고 홈페이지 하나를 뚝딱 만들 수 있었다. Wix 괜찮구나 간편한 사용이 가능하다. 드래그 앤 드롭 방식으로 기존에 코딩 방식으로는 한번 더 생각했을 레이아웃도 쉽게 구현할 수 있다. 애니메이션 효과를 클릭한번으로 간편하게 구현할 수 있다. 생각보다 다양한 기본 요소들을 제공하고 있다. 그림을 넣고 글자를 입력하는 것 또한 간편하다. 원한다면 통일된 스타일을 공통 요소에 입힐 수도 있음. 쇼핑몰이나 기타 포맷도 제공하고 있는데 생각보다 wix가 제공하는 틀 안에서 구현한다면 힘들지 않게 사이트 구축이 가능하리라 생각한다. 이런건 별로네 글로만 되어 있는 홈페이지여서 다행이라고 생각. 복잡한 요소가 들어가면 그 결과르 나는 장담하지 못할 것 같다. (복잡한 요소는 어울리지 않는다고 생각) 모바일 반응형 디자인도 제공하고 있는데 완벽하게 되진 않는다. 모바일 버전은 다시한번 손봐줘야 하는 상황.(하지만 이 부분은 기존 코딩 방식이 더 빡셀 것이라 예상) 화면이 축소되지 않고 실제크기에서 작업해야 하기 때문에 간격 위아래로 배치된 요소의 간격 등을 맞추기에는 좀 힘들다. 종합빠르고 내용이 없는 홈페이지를 만들 계획이 있다면 wix도 괜찮은 대안. 하지만 무료일 경우 도메인을 따로 등록하지 못하고 홈페이지 하단에 wix로 만든 홈페이지라고 광고가 따라다닐 것이다. 결제를 해야 특정 url과 광고 free를 얻을 수 있으니 이 점 유념하셔서 작업 허시길!","categories":[{"name":"html","slug":"html","permalink":"https://shin-ae.github.io/categories/html/"}],"tags":[{"name":"wix, 간편하게 홈페이지 만들기, 불리오","slug":"wix-간편하게-홈페이지-만들기-불리오","permalink":"https://shin-ae.github.io/tags/wix-간편하게-홈페이지-만들기-불리오/"}]},{"title":"잡담 01","slug":"etc-01","date":"2017-08-10T11:15:52.000Z","updated":"2017-08-10T11:27:13.793Z","comments":true,"path":"2017/08/10/etc-01/","link":"","permalink":"https://shin-ae.github.io/2017/08/10/etc-01/","excerpt":"","text":"주절주절…디자인 하면서 HTML, CSS를 다룰 수 있는 사람들은 얼마나 많은가….에이전시에 있으면서 그 안에 있던 디자이너들은 모두 퍼블리싱 정도는 할 수 있었다. 별로 특별하게 생각하지 않는다. 그러다보니 jquery도 사용하게 되고 쓰는데 어려움을 느껴 javascript까지 배우게 된다. 스터디 자료를 준비하면서 lodash를 처음 접하면서 cto께 배움을 청하였다. 친절하게 알려주시면서 조언을 해주셨다. 자바스크립트를 너무 깊이 안하셔도 될거 같다고… 필요하다면 lodash같이 편리하게 사용할 수 있는 것들이 있으니 그런것을 활용하고, 거기에 없는 것만 짜보시는 것이 어떻느냐. 복잡하지 않고 단순한 것부터. 그리고 jquery를 같이 쓰면서 눈에 보이면 더 재밌게 하실 수 있으실 거라고. 얘기를 듣고보니 내가 먼길을 돌아온건 아닐까 하는 생각이 든다. 다시 jquery를 살펴보게 되었다. 디자이너의 타이틀을 버리지는 않을 것이다. 그렇게 나는 어디까지 갈 수 있을까. 나는 어디까지 할 수 있을까. 어디로 가야하나…. 다시 초심으로 돌아가서 이것 저것 일단 만들어봐야겠다.","categories":[{"name":"etc","slug":"etc","permalink":"https://shin-ae.github.io/categories/etc/"}],"tags":[{"name":"디자이너, 현타","slug":"디자이너-현타","permalink":"https://shin-ae.github.io/tags/디자이너-현타/"}]},{"title":"제플린의 숫자가 이상하다!","slug":"zeplin-03","date":"2017-08-08T12:26:28.000Z","updated":"2017-08-09T04:32:45.376Z","comments":true,"path":"2017/08/08/zeplin-03/","link":"","permalink":"https://shin-ae.github.io/2017/08/08/zeplin-03/","excerpt":"","text":"문제인식오늘도 신나게 디자인 작업을 하고 제플린에 작업물을 올렸는데 개발자분께서 물어오셨다. 작업 사이즈 어떻게 하셨나요?이상하다. 분명 제플린에 잘 나와있을텐데. 개발자분께서 당연한 것을 물어오실리 만무하니 제플린을 황급히 확인했다. 맙소사 나는 한 페이지를 900x640으로 작업하여 올렸는데 제플린에서는 한페이지에 450x320으로 나와있었다. 딱 반이 되어서 해결방법을 찾기 전까지 개발자분께서는 계산기를 두려 숫자에 2배를 해가며 퍼블리싱을 하시는 사태가 발생했다. 원인제플린에서는 density 즉, 밀도를 선택할 수 있다.1x, 2x로 제공을 하고 2x를 선택할 경우 모든 단위의 숫자가 반토막이 나서 표시되게 된다. 해결이건 단위를 바꾸는 것과 같이 삭제하지 않고 간단하게 클릭 몇번으로 해결 할 수 있다.DASHBOARD화면에서 바꿀 수 있다. 오른쪽 옵션창을 보면 두번째 항목에 Density가 있는데 마우스 오버하면 버튼이 보인다. 여기에서 x1를 선택하면 디자인한데로 단위가 나온다. 정리이 쓸데없는 기능은 무엇인가 하고 생각했지만 쓸모가 있겠지라고 생각해본다.개발자에게 넘기기 전에 density를 한번 더 확인하자.","categories":[{"name":"design","slug":"design","permalink":"https://shin-ae.github.io/categories/design/"}],"tags":[{"name":"zeplin, 제플린, 숫자, 1x, 2x","slug":"zeplin-제플린-숫자-1x-2x","permalink":"https://shin-ae.github.io/tags/zeplin-제플린-숫자-1x-2x/"}]},{"title":"제플린 기본 단위를 바꿔보자!","slug":"zeplin-02","date":"2017-08-08T11:57:44.000Z","updated":"2017-08-09T04:36:38.831Z","comments":true,"path":"2017/08/08/zeplin-02/","link":"","permalink":"https://shin-ae.github.io/2017/08/08/zeplin-02/","excerpt":"","text":"문제인식디자인 작업을 끝내고 제플린에 무사히 Export를 했습니다. 개발자분께도 그 사실을 알려드렸는데 예상 밖의 요청이 들어오게 됩니다. 제플린에 나오는 기본 단위를 바꿔주실 수 있으신가요? 그제서야 확인해보니 제플린에서 기본 단위가 px이 아닌 dp였습니다.아니 세상에 dp라는 단위는 도대체 무엇인가…거기에 폰트 사이즈는 sp였습니다. 세상에 마상에… 일단, dp와 sp에 대해서 알고 가도록 하겠습니다.dp(Density Independent Pixel), sp(Scale-independent Pixel)는 안드로이드에서 나온 단위입니다. 해상도에 관계없이 절대값이던 px과는 달리 해상도에 맞춰 깨지지 않고 나옵니다. 단위에는 dp, text나 line-height같은 글자관련 요소에는 sp를 씁니다. 굳이 단위를 바꿔서 해야 하나는 질문도 있습니다만 일단 바꾸기로 합니다. 원인제플린에서 dp, sp로 단위가 나오는 이유는 처음 제플린에 export를 할때 설정을 잘못해서 그랬습니다. wep을 선택하면 px이 기본으로 나오지만 app을 선택하면 dp와 sp로 단위가 나옵니다.위 그림에서 보시면 프로젝트 화면에서 Android라고 설정되어 있는 것을 볼 수 있습니다. 해결제플린 유료 회원이시면 여러개의 프로젝트를 만들 수 있어서 새로 하나 만들면 됩니다만 무료회원이시라면 프로젝트를 삭제하시고 다시 만드셔야 합니다.제플린에서 Create my first project를 누르시고 type를 설정하시는 창에서 wep을 선택해 줍니다. 그러면 px을 기본으로 하는 프로젝트를 생성할 수 있습니다. 참고로 pt단위를 쓰고 싶으시면 ios를 선택하시면 됩니다. 정리제플린은 중간에 단위를 바꿀 수 없기 때문에 처음에 올리시기 전에 개발자와 단위에 대해서 상의하시는 것이 좋을 것 같습니다. 또한 한 프로젝트에 다양한 단위를 사용할 수는 없으니 필요하다면 제플린 유료 가입도 생각해 보셔야 할 것 같습니다.","categories":[{"name":"design","slug":"design","permalink":"https://shin-ae.github.io/categories/design/"}],"tags":[{"name":"zeplin, 제플린, 단위","slug":"zeplin-제플린-단위","permalink":"https://shin-ae.github.io/tags/zeplin-제플린-단위/"}]},{"title":"제플린에 Export 되지 않는다.","slug":"zeplin-01","date":"2017-08-08T11:24:39.000Z","updated":"2017-08-09T04:32:21.457Z","comments":true,"path":"2017/08/08/zeplin-01/","link":"","permalink":"https://shin-ae.github.io/2017/08/08/zeplin-01/","excerpt":"","text":"문제인식photoshop CC버전에서는 처음 시작할 때 웹, 인쇄, 모바일 등 작업을 선택 할 수 있는데 그것을 선택하지 않고 작업을 했을 시에 제플린에 추가가 되지 않았습니다. 즉, 레이어 단위로는 제플린에 추가가 되지 않는 것이죠. 폴더 단위도 마찮가지 입니다. 원인원인을 찾기 위해 제플린의 확장 창을 봅니다. 제플린의 확장 창은 창 &gt; 확장에서 찾으실 수 있습니다.보시면 No artboard selected되어 있는 것을 볼 수 있습니다.artboard는 대지입니다. 대지가 없어서 제플린에 추가되지 않는 것입니다.참고로 제플린은 CC버전 이상에서 사용하실 수 있는데 CC버전 이하에서는 대지라는 기능이 없으니 당연하다고 할 수 있습니다. 해결해결방법은 간단합니다. 대지를 추가시켜 주시면 됩니다. 대지는 레이어 창에서 추가 하실 수 있습니다.옆에 단추를 누르시고 새대지를 추가하셔서 작업 사이즈에 맞게 조절하시면 됩니다. 정리제플린은 대지 안에 있는 요소들을 인식하여 Export합니다. 제플린으로 개발자와 공유해야 하는 작업이라면 처음에 만드실때 웹이나 앱을 선택하시면 편리하게 작업하실 수 있습니다.","categories":[{"name":"design","slug":"design","permalink":"https://shin-ae.github.io/categories/design/"}],"tags":[{"name":"zeplin, 제플린, 오류, 대지, PsCC","slug":"zeplin-제플린-오류-대지-PsCC","permalink":"https://shin-ae.github.io/tags/zeplin-제플린-오류-대지-PsCC/"}]},{"title":"블로그 본문에서 이미지가 나오지 않는다!","slug":"hexo-img-error","date":"2017-08-05T13:51:31.000Z","updated":"2017-08-05T15:54:54.284Z","comments":true,"path":"2017/08/05/hexo-img-error/","link":"","permalink":"https://shin-ae.github.io/2017/08/05/hexo-img-error/","excerpt":"","text":"바야흐로 c3관련 포스팅을 하고 있을 때…c3작업을 하면서 결과화면을 캡쳐해서 저장했다. hexo s로 봤을 때에는 이미지가 잘 보였는데 deploy를 하고 url로 들어가 봤을 때 안보이는 사태가 발생. 아아..도대체 뭐가 문제인가…일단 들어가 있던 파일을 확인해 보았다. public - css - images 안에 차곡차곡 잘 들어있었다. 태그도 ![기본](/css/images/c3_06.jpg) 이렇게 이쁘게 들어가 있다! 그럼 도대체 뭐가 문제인가!그러다가 이미지의 확장자 명이 JPG 대문자로 쓰여져 있는 것을 보았다. 설마… 했는데 설마가 맞음 ㅎㅎ파일의 확장자 명을 소문자로 바꿀 수 없어서 포스팅의 코드를 ![기본](/css/images/c3_06.JPG) 이렇게 대문자로 고쳤더니 이미지가 나왔다. ㅋㅋ혹시 이런 문제가 있다면 디테일한 확장자명까지 다시한번 살펴보시길!","categories":[{"name":"blog","slug":"blog","permalink":"https://shin-ae.github.io/categories/blog/"}],"tags":[{"name":"hexo, 안나와, 이미지","slug":"hexo-안나와-이미지","permalink":"https://shin-ae.github.io/tags/hexo-안나와-이미지/"}]},{"title":"c3로 그래프 그리기_02","slug":"c3-02","date":"2017-07-30T12:58:31.000Z","updated":"2017-08-02T11:52:34.536Z","comments":true,"path":"2017/07/30/c3-02/","link":"","permalink":"https://shin-ae.github.io/2017/07/30/c3-02/","excerpt":"","text":"C3로 그래프를 그려보자.1_ 저번 포스팅에는 준비를 했으니 이제 그래프를 그려봅니다.다짜고짜 코드를 가져옵니다. 본문에는 차트가 들어갈 div를 마련.1&lt;div id=\"chart\"&gt;&lt;/div&gt; 스크립트 넣는 부분에 적당한 예시의 코드를 가져온다.12345678910var chart = c3.generate(&#123; data: &#123; x: 'x', columns: [ ['x', 30, 50, 100, 230, 300, 310], ['data1', 30, 200, 100, 400, 150, 250], ['data2', 130, 300, 200, 300, 250, 450] ] &#125;&#125;); 전에도 말했지만 c3와 d3는 서버에 올리지 않으면 잘 보이니 않는다. 그래서 바로 에디터에서 서버를 구동해서 볼 수 있는 live server preview 플러그인을 사용했다. (VS code기준) 그러면 이런 모습이 보여지게 된다. 아름답다. 반응형에 데이터 위에 마우스가 오버되었을 때 말풍선도 나온다~ㅇㅁㅇ! 2_ 데이터를 적용해보자데이터를 넣는 방법은 아주 쉽다.1234data: &#123; x: 'x', url: 'data_01.csv'&#125; 데이터를 columns에서 url로 바꾸어주고 저장되어 있는 위치를 써준다. 하지만 이렇게 해서는 아직 그래프가 보여지지 않는다. 3_x축 정의데이터에 X축이 같이 있기 떄문에 x축을 정의해준다. type에는 여러가지가 있는걸까. 암튼 data 레벨에 x축 범위에 대한 axis속성을 추가한다.1234axis: &#123; x: &#123; type: 'category', &#125;, 그러면 이제 이런 모습을 볼 수 있게된다. 4_스타일 바꾸기데이터가 입혀진 그래프를 그렸으니 이제 디자인 파일과 비교하면서 스타일을 다듬으면 된다.일단 데이터 마다 점이 찍혀 있으니 그것을 빼보자.123point: &#123; show: false&#125; 그리고 x,y축의 선이 너무 진한 것 같으니 css에서 선의 색을 조절해보자.12345678910111213.c3 .c3-axis-x path,.c3 .c3-axis-x line &#123; stroke: #ddd;&#125; .c3 .c3-axis-y path,.c3 .c3-axis-y lines &#123; stroke: #ddd;&#125; .c3-ygrid-line.gridGray line &#123; stroke: #ddd;&#125; 데이터 컬러의 색도 바꿀 수 있다. 특정 데이터의 색을 바꿀 수 있지만 간단하게 패턴으로 바꿔본다.123color: &#123; pattern: ['#ff5f00', '#ffe082', '#80deeb', '#c4e0a6', '#bdaba3']&#125; 여기까지 하면 이런 데이터를 볼 수 있다. 5_ 마무리, 포멧 정리이제 거의 다 한 것 같다. 마지막으로 x축과 y축 범위? 단위를 정리해주자.y축의 단위가 %이기때문에 %를 추가해보자.axis아래에 x다음에 추가해주면 된다.1234567 y: &#123; tick: &#123; format: function(d) &#123; return d + \"%\"; &#125; &#125;,&#125; 그리고 x축의 날짜도 다 보여 줄 필요가 없으니 줄일 수 있다. axis의 x에 추가하면 된다.123tick: &#123; count: 7&#125; 마지막으로 y축의 그리드를 추가해줘야 하는데 그리드는 이렇게 추가할 수 있다.12345grid: &#123; y: &#123; show: true &#125;&#125; 그리드가 점선인데다가 여러개가 있어서 상당히 지저분해 보인다.결국 특정 y값을 정해서 그 값의 그리드만 표현하기로.1234567891011121314grid: &#123; y: &#123; lines: [&#123; value: 0, class: 'gridGray' &#125;, &#123; value: 1, class: 'gridGray' &#125;, &#123; value: 2, class: 'gridGray' &#125;] &#125;&#125; 이렇게 되면 그리고자 했던 그래프를 만날 수 있다. 최종 코드는123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869&lt;!DOCTYPE html&gt;&lt;html lang=\"ko\"&gt;&lt;head&gt; &lt;style&gt; .c3 .c3-axis-x path, .c3 .c3-axis-x line &#123; stroke: #ddd; &#125; .c3 .c3-axis-y path, .c3 .c3-axis-y lines &#123; stroke: #ddd; &#125; .c3-ygrid-line.gridGray line &#123; stroke: #ddd; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=\"chart\"&gt;&lt;/div&gt; &lt;script&gt; var chart = c3.generate(&#123; data: &#123; x: 'x', url: 'data_01.csv' &#125;, axis: &#123; x: &#123; type: 'category', tick: &#123; count: 7 &#125; &#125;, y: &#123; tick: &#123; format: function(d) &#123; return d + \"%\"; &#125; &#125;, &#125; &#125;, point: &#123; show: false &#125;, color: &#123; pattern: ['#ff5f00', '#ffe082', '#80deeb', '#c4e0a6', '#bdaba3'] &#125;, grid: &#123; y: &#123; lines: [&#123; value: 0, class: 'gridGray' &#125;, &#123; value: 1, class: 'gridGray' &#125;, &#123; value: 2, class: 'gridGray' &#125;] &#125; &#125; &#125;); &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;","categories":[{"name":"html","slug":"html","permalink":"https://shin-ae.github.io/categories/html/"}],"tags":[{"name":"html, c3, graph, boolio","slug":"html-c3-graph-boolio","permalink":"https://shin-ae.github.io/tags/html-c3-graph-boolio/"}]},{"title":"c3로 그래프 그리기_01","slug":"c3","date":"2017-07-30T00:54:23.000Z","updated":"2017-08-02T11:51:57.499Z","comments":true,"path":"2017/07/30/c3/","link":"","permalink":"https://shin-ae.github.io/2017/07/30/c3/","excerpt":"","text":"현재 boolio라는 로보어드바이저의 전체적인 디자인을 담당하고 있다.불리오는 간단히 펀드 자문을 한다고 말할 수 있는데 한달에 한번씩 추천 펀드를 내놓는다.그것이 보고서의 형태로 나가는데 그 안에는 한달 동안의 수익, 추천 펀드, 일정 등이 같이 나가게 된다. 여하튼, 인디자인으로 매달 작업하던 것을 이제는 모바일과 웹 서비스로 자동화 시키는 프로젝트를 진행하고 있다. 그 서비스에 그래프가 존재하는 것은 당연했고, 일러스트로 그리던 그래프를 웹에 옮기는 작업이 필요했다.여태 D3.js를 배우면서 그래프 그리는 연습을 했지만 D3는 자율도가 높은 반면 자바스크립트를 모르는 사람에게는 어느정도의 진입장벽이 존재. D3로 시도는 해보았지만 그래프가 잘 나타나지 않았다. 거기에 반응형으로 디자인을 해야했기 때문에 난감했던 상황. 그 와중에 C3.js라는 D3기반의 좀 더 쉬운 라이브러리를 발견. 썰이 길었다. 이제 준비를 시작하자!1_ C3.js를 살펴보자c3는 나같은 사람들을 위해서 굉장히 쉽다. 기본이 반응형이고 디자인도 깔끔하게 되어있어 많이 손댈 필요도 없다. 다만 d3와 마찮가지로 서버에 올려야 확인이 가능하다는 단점이 있는데 이 부분은 데이터를 다른 파일에서 불러오지 않고 내부에 입력하면 확인 가능하다. 인덱스에서 보면 기본적으로 제공하는 디자인을 볼 수 있다. 깔끔하다.메뉴의 examples에서 보면 다양한 예시의 그래프를 볼 수 있다. c3에서 기본적으로 제공하고 있는 데이터들. 하나하나 들여다 보면 참 심플하고 예쁘다.여기에서 내가 필요했던 것은 라인 그래프! 기본적으로 디자인 파일이 있다면 쓰기 더 쉬워진다. 나는 여태까지 썼던 그래프의 디자인(일러스트로 제작)이 있었기 때문에 그 그래프를 구현해 보기로 했다. 2_ 데이터 정리한번 쓰고 말것이 아니라 매달 써야하기 때문에 나는 데이터 파일을 넣을 수 있는 포맷이 필요했다.일단, 내가 가진 데이터는 엑셀로 있는 파일이었는데 엑셀 파일에서 제일 쉽게 변형할 수 있는 데이터 파일은 .CSV파일이다. 아래로 데이터가 나열되는 형태의 엑셀파일. 다른이름 으로 저장을 누르고 csv파일로 저장을 누른다. 그러면 들어갈 데이터 형태는 준비가 되었다. 3_ 그럼 c3를 코딩해보자.c3는 d3를 기반으로 하고 있기 때문에 d3아래에 위치해야한다. 각 홈페이지에서 받아서 import시켜준다. c3는 스타일시트도 있기 때문에 그것도 받아서 같이 넣어준다.123456&lt;!-- Load c3.css --&gt;&lt;link href=\"/path/to/c3.css\" rel=\"stylesheet\"&gt;&lt;!-- Load d3.js and c3.js --&gt;&lt;script src=\"/path/to/d3.v3.min.js\" charset=\"utf-8\"&gt;&lt;/script&gt;&lt;script src=\"/path/to/c3.min.js\"&gt;&lt;/script&gt; 이제 준비는 다 끝났으니 다음은 진짜 c3로 그래프를 그리는 작업을 해보자!커밍쑨!","categories":[{"name":"html","slug":"html","permalink":"https://shin-ae.github.io/categories/html/"}],"tags":[{"name":"html, c3, graph, boolio","slug":"html-c3-graph-boolio","permalink":"https://shin-ae.github.io/tags/html-c3-graph-boolio/"}]},{"title":"마크다운문법","slug":"markDown","date":"2017-07-26T12:39:26.000Z","updated":"2017-10-21T05:41:52.486Z","comments":true,"path":"2017/07/26/markDown/","link":"","permalink":"https://shin-ae.github.io/2017/07/26/markDown/","excerpt":"","text":"이 블로그들은 대부분 마크다운 문법으로 만들어 질 것이다. 왜냐하면 포스팅을 하다보면 귀찮기 때문!! 귀찮음의 종착역! 마크다운 문법이란 무엇인가! 마크다운 문법이란? 마크다운 (Markdown)은 마크업 언어의 일종으로, 존 그루버(John Gruber)와 아론 스워츠(Aaron Swartz)가 만들었다. 읽기도 쓰기도 쉽다는 장점이 있다. 그루버는 마크다운으로 작성한 문서를 HTML로 변환하는 펄 스크립트도 만들었다. 확장자는 .md를 쓴다. 라고 한다. 소개받고 쓰면서 느낀 것은 에디터라는 것이다. 글자에 스타일을 부여하는.글씨를 두껍게 하기위해 버튼을 누르던 것을 마크다운에서는 ** 두껍게 **로 바꿀 수 있다. 글을 쓰는 것과 동시에 스타일을 부여할 수 있는 것이 매력적이다. 마크다운문법 사용하기Header 마크다운 실행결과 # h1 h1 ## h2 h2 ### h3 h3 #### h4 h4 ##### h5 h5 blockquote 마크다운 실행결과 &gt; 인용문 인용문 Code Blocks코드블럭은 Back quote 세개를 위아래로 붙여주면 됩니다.~~~코드블럭~~~1코드블럭 인라인코드 마크다운 실행결과 `인라인코드` 인라인코드 강조 마크다운 실행결과 * 기울여쓰기* 기울여쓰기 ** 굵게쓰기 ** 굵게쓰기 취소선 마크다운 실행결과 ~~취소선~~ 취소선 수평선-또는 *또는 _을 세개이상 작성 마크다운 실행결과 --- — 링크 마크다운 실행결과 [링크](http://example.com “링크 제목”) 링크 &lt;https://github.com/shin-ae &gt; https://github.com/shin-ae [링크](#id) 링크 리스트순서가 없는 리스트는 *,+,-으로 시작 마크다운 실행결과 - li li 이미지 마크다운 실행결과 ![alt text](/css/images/avatar.png) ![alt text](image_URL) 제외하기특수부호로 이루어져 있는 마크다운 문법이다 보니 쓰고싶은 부호도 못쓰는 경우가 많은데 이럴 때에는 앞뒤로 ‘\\’ 백 슬래쉬를 추가해 주면 된다. 주의할 점은 뒤에 쓰이는 제외할 문자 앞에 쓰여야 한다는 것. 말로하면 어려운데 다음 예제를 보면 이해가 쉽다. 마크다운 실행결과 \\* 강조 \\* * 강조 *","categories":[{"name":"html","slug":"html","permalink":"https://shin-ae.github.io/categories/html/"}],"tags":[{"name":"html, markdown","slug":"html-markdown","permalink":"https://shin-ae.github.io/tags/html-markdown/"}]},{"title":"Hexo 글쓰기","slug":"Hexo-01","date":"2017-07-17T10:05:43.000Z","updated":"2017-07-17T10:35:13.834Z","comments":true,"path":"2017/07/17/Hexo-01/","link":"","permalink":"https://shin-ae.github.io/2017/07/17/Hexo-01/","excerpt":"","text":"헥소 서버 구동헥소는 내장서버를 구동하여 작업물을 확인할 수 있다.방법은 다음 명령어를 터미널에 입력1hexo s s = server를 줄인 명령어로 같은 동작을 수행한다.그러면12INFO Start processingINFO Hexo is running at http://localhost:4000/. Press Ctrl+C to stop. 라는 결과를 받을 수 있을 것이다.인터넷 브라우저에서 저 주소를 입력하면 블로그 확인이 가능하다. 서버의 구동을 멈추고 싶다면 터미널에서 Ctrl+c를 두번 누르면 간단하게 서버 구동을 끝낼 수 있다. 글쓰기헥소에서는 글을 만들면서 내용을 작성할 수는 없는 것 같다. 우선 터미널에서 새 파일을 생성하면1hexo new &quot;포스트명&quot; source/_posts 에 포스트명으로 만들어진 파일이 생성되는 것을 알 수 있다.헥소에서는 초안 작성이라는 기능도 제공을 하는데 지금 당장 발행하고 싶지 않은 문서는1hexo new draft &quot;포스트명&quot; 으로 만들 수 있다. 이 문서는 source/_drafts안에 생성된다. 이 초안 문서들은 나중에1hexo publish &quot;포스트명&quot; 으로 _posts폴더로 옮겨 보여지게 할 수 있다. deploy내가 포스팅을 끝낼때마다 하는 작업이다.단어 뜻으로는 generate = 생성하다, deploy = 배치하다 인데 git에 연동이 되어 있다면 편하게 쓸 수 있는 기능이라는 것만 알겠다. 우선, git을 연동하는 파일은 _config.yml로 최 상단에 위치한 파일이다.1234deploy: type: git repo: https://github.com/shin-ae/shin-ae.github.io.git branch: master 이렇게 설정하고, 만약 deploer 플러그인이 없어서 작동되지 않는다면1npm install --save hexo-deployer-git 을 사용하여 플러그인을 설치하자.그리고 git에 public파일을 업로드 해준다. 명령어는1hexo g 1hexo d g = generate, d = deploy로 간단하게 줄여서 쓸 수 있다.","categories":[{"name":"blog","slug":"blog","permalink":"https://shin-ae.github.io/categories/blog/"}],"tags":[{"name":"hexo, 블로그 만들기, 글쓰기","slug":"hexo-블로그-만들기-글쓰기","permalink":"https://shin-ae.github.io/tags/hexo-블로그-만들기-글쓰기/"}]},{"title":"Hexo 시작하기","slug":"Hexo-start","date":"2017-07-16T13:05:42.000Z","updated":"2017-07-16T16:09:57.051Z","comments":true,"path":"2017/07/16/Hexo-start/","link":"","permalink":"https://shin-ae.github.io/2017/07/16/Hexo-start/","excerpt":"","text":"네이버 블로그는 있었지만 따로 개인 블로그를 만들고 싶었다. 마침 스터디를 같이 하던 wonny께서도 만들 예정이라고 여러가지를 추천해주심. ruby기반의 Jekyll, hugo, Hexo 등을 살펴보았음. node기반이라는게 맘에 들어 헥소를 프레임워크로 사용하여 블로그를 만들게 되었다. 사전설정헥소를 설치하기 전 몇가지를 미리 설치해야함. node.jsgit NodeJS 는 구글 크롬의 자바스크립트 엔진 (V8 Engine)에 기반해 만들어진 서버 사이드 플랫폼이라고 한다. git은 버전관리 시스템. 일단 이 두가지를 설치하고 나면 다음으로 넘어가도록 하자. 나는 git을 사용하고 있지만 cmd에서 컨트롤 하기 때문에 cmd에서 컨트롤 하는 것을 기본으로 설명하도록 하겠음. Hexo 설치1npm install -g hexo-cli 헥소를 설치 했다면 타켓 의 hexo초기화를 위해 다음을 수행123hexo init &lt;folder&gt;cd &lt;folder&gt;npm install 예를들면 나는 c아래에 blog 폴더를 만들어 거기에 헥소를 설치했는데 이럴 경우 123c:\\blog&gt;hexo init blogc:\\blog&gt;cd blogc:\\blog&gt;npm install 이렇게 써내려가면 된다. 이렇게 hexo설치 끝!하지만 끝나도 끝난게 아니기 때문에 다음 포스팅에서는 테마 설치로 돌아오겠음. 커밍쑨~","categories":[{"name":"blog","slug":"blog","permalink":"https://shin-ae.github.io/categories/blog/"}],"tags":[{"name":"hexo, 블로그만들기","slug":"hexo-블로그만들기","permalink":"https://shin-ae.github.io/tags/hexo-블로그만들기/"}]},{"title":"Hello World","slug":"hello-world","date":"2017-07-15T16:55:16.032Z","updated":"2017-07-20T12:40:25.429Z","comments":true,"path":"2017/07/16/hello-world/","link":"","permalink":"https://shin-ae.github.io/2017/07/16/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}